// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"

	"github.com/KellyLSB/demondin/graphql/postgres"
	"github.com/google/uuid"
	postgres1 "github.com/jinzhu/gorm/dialects/postgres"
)

type Postgresql interface {
	IsPostgresql()
}

type Invoice struct {
	ID             uuid.UUID              `json:"id" gorm:"type:uuid;primary_key;default:uuid_generate_v4()"`
	CreatedAt      time.Time              `json:"createdAt"`
	UpdatedAt      time.Time              `json:"updatedAt"`
	DeletedAt      *time.Time             `json:"deletedAt"`
	StripeTokenID  *string                `json:"stripeTokenID"`
	StripeChargeID *string                `json:"stripeChargeID"`
	StripeToken    *postgres.StripeToken  `json:"stripeToken" gorm:"type:jsonb;"`
	StripeCharge   *postgres.StripeCharge `json:"stripeCharge" gorm:"type:jsonb;"`
	SubTotal       int                    `json:"subTotal"`
	DemonDin       int                    `json:"demonDin"`
	Taxes          int                    `json:"taxes"`
	Total          int                    `json:"total"`
	Items          []*InvoiceItem         `json:"items"`
}

func (Invoice) IsPostgresql() {}

type InvoiceItem struct {
	ID          uuid.UUID     `json:"id" gorm:"type:uuid;primary_key;default:uuid_generate_v4()"`
	CreatedAt   time.Time     `json:"createdAt"`
	UpdatedAt   time.Time     `json:"updatedAt"`
	DeletedAt   *time.Time    `json:"deletedAt"`
	Invoice     *Invoice      `json:"invoice"`
	InvoiceID   uuid.UUID     `json:"invoiceID" gorm:"type:uuid;"`
	Item        *Item         `json:"item"`
	ItemID      uuid.UUID     `json:"itemID" gorm:"type:uuid;"`
	ItemPrice   *ItemPrice    `json:"itemPrice"`
	ItemPriceID uuid.UUID     `json:"itemPriceID" gorm:"type:uuid;"`
	Options     []*ItemOption `json:"options"`
}

func (InvoiceItem) IsPostgresql() {}

type ItemOption struct {
	ID               uuid.UUID       `json:"id" gorm:"type:uuid;primary_key;default:uuid_generate_v4()"`
	CreatedAt        time.Time       `json:"createdAt"`
	UpdatedAt        time.Time       `json:"updatedAt"`
	DeletedAt        *time.Time      `json:"deletedAt"`
	InvoiceItem      *InvoiceItem    `json:"invoiceItem"`
	InvoiceItemID    uuid.UUID       `json:"invoiceItemID" gorm:"type:uuid;"`
	ItemOptionType   *ItemOptionType `json:"itemOptionType"`
	ItemOptionTypeID uuid.UUID       `json:"itemOptionTypeID" gorm:"type:uuid;"`
	Values           postgres1.Jsonb `json:"values"`
}

func (ItemOption) IsPostgresql() {}

type ItemOptionType struct {
	ID        uuid.UUID       `json:"id" gorm:"type:uuid;primary_key;default:uuid_generate_v4()"`
	CreatedAt time.Time       `json:"createdAt"`
	UpdatedAt time.Time       `json:"updatedAt"`
	DeletedAt *time.Time      `json:"deletedAt"`
	Item      *Item           `json:"item"`
	ItemID    uuid.UUID       `json:"itemID" gorm:"type:uuid;"`
	Key       string          `json:"key"`
	ValueType string          `json:"valueType"`
	Values    postgres1.Jsonb `json:"values"`
}

func (ItemOptionType) IsPostgresql() {}

type ItemPrice struct {
	ID         uuid.UUID  `json:"id" gorm:"type:uuid;primary_key;default:uuid_generate_v4()"`
	CreatedAt  time.Time  `json:"createdAt"`
	UpdatedAt  time.Time  `json:"updatedAt"`
	DeletedAt  *time.Time `json:"deletedAt"`
	Item       *Item      `json:"item"`
	ItemID     uuid.UUID  `json:"itemID" gorm:"type:uuid;"`
	Price      int        `json:"price"`
	BeforeDate time.Time  `json:"beforeDate"`
	AfterDate  time.Time  `json:"afterDate"`
	Taxable    bool       `json:"taxable"`
}

func (ItemPrice) IsPostgresql() {}

type NewInvoice struct {
	ID            *uuid.UUID       `json:"id"`
	StripeTokenID *string          `json:"stripeTokenID"`
	Submit        *bool            `json:"submit"`
	Items         []NewInvoiceItem `json:"items"`
}

type NewInvoiceItem struct {
	ID          *uuid.UUID      `json:"id"`
	ItemID      uuid.UUID       `json:"itemID"`
	ItemPriceID uuid.UUID       `json:"itemPriceID"`
	Options     []NewItemOption `json:"options"`
}

type NewItem struct {
	ID          *uuid.UUID          `json:"id"`
	Name        string              `json:"name"`
	Description *string             `json:"description"`
	Prices      []NewItemPrice      `json:"prices"`
	Options     []NewItemOptionType `json:"options"`
}

type NewItemOption struct {
	ID               *uuid.UUID      `json:"id"`
	ItemOptionTypeID uuid.UUID       `json:"itemOptionTypeID"`
	Values           postgres1.Jsonb `json:"values"`
}

type NewItemOptionType struct {
	ID        *uuid.UUID      `json:"id"`
	Key       *string         `json:"key"`
	ValueType *string         `json:"valueType"`
	Values    postgres1.Jsonb `json:"values"`
}

type NewItemPrice struct {
	ID         *uuid.UUID `json:"id"`
	Price      int        `json:"price"`
	BeforeDate time.Time  `json:"beforeDate"`
	AfterDate  time.Time  `json:"afterDate"`
}

type Paging struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
}
